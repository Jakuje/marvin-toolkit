#!/usr/bin/env node

var program = require('commander');
var fs = require('fs');
const NodeRSA = require('node-rsa');

program
  .version('0.0.0')
  .usage('[options] <encrypted data file> <output time file or "-"> <PEM RSA private key file> <ciphertext size> [pkcs1|pkcs1_oaep]')
  .description('time decrypting data')
  .parse(process.argv);

if (program.args.length < 4)
  throw "wrong number of arguments";

var keyObj, inHex, encHex;
var algName = "pkcs1";
var keyStr = "";
var inFileOrHex = program.args[0];
var outFile = program.args[1];
var keyFileOrStr = program.args[2];
var readLength = Number(program.args[3]);
if (program.args.length > 4) algName = program.args[4];

keyStr = fs.readFileSync(keyFileOrStr);

keyObj = new NodeRSA(keyStr);

keyObj.setOptions({ encryptionScheme: {scheme: algName}});

const fileDescriptor = fs.openSync(inFileOrHex, 'r');

const outFD = fs.openSync(outFile, 'w');

const buffer = Buffer.alloc(readLength);

let bytesRead;

do {

    bytesRead = fs.readSync(fileDescriptor, buffer, 0, buffer.length);

    if (bytesRead > 0) {

        var startTime = process.hrtime();

        try {
            var plainStr = keyObj.decrypt(buffer);
        } catch (ex) {};

        var endTime = process.hrtime();

        var diff = (endTime[0] - startTime[0]) * 1000000000 + endTime[1] - startTime[1];

        var outBuffer = Buffer.alloc(4);
        outBuffer.writeInt32LE(diff, 0);
        fs.writeSync(outFD, outBuffer);
    }
} while (bytesRead === buffer.length);

fs.closeSync(fileDescriptor);
fs.closeSync(outFD);
